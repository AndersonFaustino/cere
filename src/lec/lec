#!/bin/bash
# Loop Extractor Compiler
# (C) 2013 University of Versailles

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$ROOT/../../"

# parse arguments
if [[ $1 == --replay=* ]]; then
    SPLIT=(${1//=/ })
    REPLAY_LOOP=${SPLIT[1]}
    echo "Compiling replay mode" > /dev/stderr
    shift
fi 

if [[ $1 == --dump ]]; then
    DUMP_MODE=1
    echo "Compiling dump mode" > /dev/stderr
    shift
fi

if [[ $1 == --instrument ]]; then
    INSTRUMENT=1
    echo "Instrumentation mode" > /dev/stderr
    shift
fi

if [[ ! -z "$DUMP_MODE" && ! -z "$INSTRUMENT" ]]; then
    INSTRUMENT=0
    echo "--instrument ignored, can't instrument in dump mode"
fi

SOURCE=${!#}
#~ shift
ARGS=$*
BASE=${SOURCE%.*}
OPTS=${@:1:$(($#-1))}

# Detect source language (fortran or C/C++ for the moment)
if [[ $SOURCE == *.f ]] || [[ $SOURCE == *.f90 ]]; then
    gcc -O0 -g -c $SOURCE -S -fplugin=$PROJECT_ROOT/libs/dragonegg.so -fplugin-arg-dragonegg-emit-ir -o $BASE.ll
else
    clang -O0 -g -c $SOURCE -S -emit-llvm -o $BASE.ll
fi 

if [ "$?" != "0" ]; then
    exit 1
fi

if [[ ! -z "$DUMP_MODE" ]]; then
    # In dump mode
    opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-extractor-all.so -loop-extract-all $BASE.ll -o $BASE.ll
    opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-manager.so -loop-dump $BASE.ll -o $BASE.ll

elif [[ ! -z "$REPLAY_LOOP" ]]; then
    # In replay mode 
    opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-extractor-all.so -loop-extract-all -isolate-loop=${REPLAY_LOOP} $BASE.ll -o $BASE.ll
    opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-manager.so -loop-replay $BASE.ll -o $BASE.ll
fi

if [[ ! -z "$INSTRUMENT" ]]; then
    opt -S -loop-simplify $BASE.ll -o $BASE.ll
    if [[ ! -z "$REPLAY_LOOP" ]]; then
        opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-instrumentation.so -vitro-loop-instrumentation -instrument-loop=${REPLAY_LOOP} $BASE.ll -o $BASE.ll
    else
        opt -S -load $PROJECT_ROOT/src/llvm-3.3.src/Release+Asserts/lib/LLVMLoop-instrumentation.so -vivo-loop-instrumentation ${INSTRU_OPTS} $BASE.ll -o $BASE.ll
    fi
fi


# In all cases
clang -c $OPTS $BASE.ll -o $BASE.o
#llc -march=x86-64 $BASE.ll -o $BASE.s
#clang -c $BASE.s -o $BASE.o
