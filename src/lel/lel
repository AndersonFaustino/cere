#!/bin/bash
# Loop Extractor Linker
# (C) 2013 University of Versailles

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$ROOT/../../"

LD=gcc

# parse arguments
if [[ $1 == --replay=* ]]; then
    SPLIT=(${1//=/ })
    REPLAY_LOOP=${SPLIT[1]}
    echo "Linking with <$REPLAY_LOOP> memory dump" > /dev/stderr
    shift
fi 

if [[ $1 == --dump ]]; then
    DUMP_MODE=1
    # lel ignores dump mode (nothing special to do)
    shift
fi

if [[ $1 == --instrument ]]; then
    INSTRUMENT=1
    echo "Instrumentation mode" > /dev/stderr
    shift
fi

ARGS=$*

if [[ -z "$REPLAY_LOOP" ]]; then
    while [ ! "$1" = "-o" ]
    do
        shift
    done
    # In normal mode, just call the linker
    $LD $ARGS
    cp "$2" lel_bin #Copy the original binary
else
    # Check that dumps exists
    if [ ! -d "dump/$REPLAY_LOOP" ]; then
        echo "No dump for $REPLAY_LOOP" > /dev/stderr
        exit -1
    fi

    # Create user main, if it does not exist
    if [ ! -f realmain.c ]; then
      echo "#include <stdlib.h>" > realmain.c
      echo "void real_main() {
      run$REPLAY_LOOP();
      exit(0);
      }" >> realmain.c
    fi
    if [[ ! -z "$INSTRUMENT" ]]; then #We want to instrument
      grep likwid_* realmain.c #Check for markers 
      if [[ !( $? == 0 ) ]]; then #if not present
        echo "#include <stdlib.h>" > realmain.c
        echo "void real_main() {
        int i;
        likwid_markerInit();
        for(i=0; i<20; i++) {
          run$REPLAY_LOOP();
        }
        likwid_markerClose();
        exit(0);
        }" >> realmain.c
      fi
    else #We don't want to instrument
      grep likwid_* realmain.c #Check for markers 
      if [[ ( $? == 0 ) ]]; then #but markers present
        echo "#include <stdlib.h>" > realmain.c
        echo "void real_main() {
        run$REPLAY_LOOP();
        exit(0);
        }" >> realmain.c
      fi
    fi
    gcc -c realmain.c


    # 0x48141000 is chosen to allocate at least 1GB for the heap
    DUMP_ARGS="-Wl,--section-start=.init_array=0x48141000"
    # First compile the memory dump objects
    rm -f dump/objs.S
    for m in dump/$REPLAY_LOOP/*.memdump; do
        n=`basename $m .memdump`
        echo ".section s$n, \"aw\"" >> dump/objs.S
        echo ".incbin \"$m\"" >> dump/objs.S
        DUMP_ARGS="$DUMP_ARGS -Wl,--section-start=s$n=0x$n"
    done
    gcc -c dump/objs.S 

    $LD $DUMP_ARGS $ARGS objs.o realmain.o
    while [ ! "$1" = "-o" ]
    do
        shift
    done
    $ROOT/staticpatcher.py lel_bin "$2" $REPLAY_LOOP
fi
